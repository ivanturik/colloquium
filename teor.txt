I. 
  1. Singleton
  Singleton — это паттерн способный сделать так чтобы от класса создавался только один объект а доступ к нему был строго контролируемым
  Все детали создания и хранения этого объекта спрятаны внутри класса (инкапсуляция) а обращаться к нему можно через специальный метод который сам создаёт объект при первом вызове
  Это удобно когда нужен один общий ресурс например для логирования настройки или работы с базой данных
  Singleton часто используется вместе с другими паттернами например фабриками для управления созданием объекта или адаптерами чтобы упростить доступ к функционалу
  Singleton используется для создания такого объекта настроек чтобы все модули системы обращались к одному и тому же экземпляру синхронно обновляя и получая параметры

  2. 5 признаков сложных систем по Гради Бучу
  Иерархичность:
  Сложные системы состоят из взаимосвязанных подсистем которые в свою очередь также могут быть разделены на более мелкие элементы и так далее до самого низкого уровня

  Относительность элементарных компонентов:
  Определение базовых элементов системы зависит от контекста и цели анализа и исследователь сам определяет что считать элементарным

  Сильные связи внутри компонентов:
  Взаимодействия внутри компонентов обычно более интенсивные и частые чем связи между разными компонентами. Это позволяет изучать их относительно изолированно

  Повторяющиеся типы подсистем:
  Сложные системы обычно состоят из ограниченного набора типов подсистем которые комбинируются в различных конфигурациях

  Эволюционное развитие:
  Рабочие сложные системы всегда являются результатом постепенного усложнения более простых систем а не создания "с нуля"

II.
  1. Что такое процедурная декомпозиция?
  Процедурная декомпозиция это разделение программы на функции каждая из которых решает конкретную задачу
  Программа становится понятной структурированной и удобной для поддержки

  2. Что такое динамический полиморфизм?
  Динамический полиморфизм это способность объектов разного типа обрабатываться единообразно с помощью одного и того же интерфейса
  В ООП это достигается с помощью наследования и виртуальных функций
  Когда мы говорим о динамическом полиморфизме мы имеем в виду что метод который будет вызван определяется в рантайме а не на этапе компиляции
  Это позволяет создавать гибкие и расширяемые системы где новые типы объектов могут быть добавлены без изменения существующего кода

  3. Что такое инкапсуляция?
  Инкапсуляция скрывает внутренние детали класса предоставляя доступ только через методы или свойства
  Это упрощает работу с объектами и защищает их от ошибок 
  Например, в классе Employee зарплата salary скрыта а доступ возможен через методы SetSalary() и GetSalary()
  Это скрывает потенциальную сложность расчёта зарплаты и позволяет гибко менять её логику без изменений кода использующего класс
